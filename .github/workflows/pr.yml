name: Terraform Plan
on:
  pull_request:
    branches: [ main ]

permissions:
  contents: read       # Required for actions/checkout
  id-token: write      # Required for requesting the JWT
  pull-requests: write # Required to write comments

jobs:
  dev:
    name: Dev
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./terraform
    steps:
      - name: Set up git repo
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          role-to-assume: arn:aws:iam::416874859154:role/GitHub-Actions
          aws-region: eu-west-2

      - name: terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: terraform init
        id: init
        run: terraform init -upgrade -backend-config="bucket=prm-deductions-dev-terraform-state"  -backend-config="key=ehr-out-service-dev/terraform.tfstate"

      - name: terraform validate
        id: validate
        run: terraform validate -no-color

      - name: Setup Terraform variables
        id: vars
        run: |-
          IMAGE_TAG=$(aws ecr describe-images --repository-name deductions/ehr-out-service --query 'sort_by(imageDetails,& imagePushedAt)[-1].imageTags[0]' --output text)
          cat > pipeline.auto.tfvars <<EOF
          task_image_tag = "$IMAGE_TAG"
          EOF

      - name: terraform plan
        id: plan
        run: terraform plan -var-file="dev.tfvars" -no-color -out tfplan
        continue-on-error: true

      - uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
            })

            // 2. Prepare format of the comment
            const output = `#### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
            #### Terraform Validation 🤖\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }
